{"ast":null,"code":"var _jsxFileName = \"/Users/justinhaut/Desktop/rentvine-project/src/containers/States.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n/* \nState Population Page\n   - Using a select dropdown, allow the user to choose a year of census data\n      - The dropdown should only have years with corresponding census data\n      - These options should be dynamically generated and not hardcoded\n   - Display a table showing each state with its corresponding population\n      - The table should initially show the census data for the most recent year\n   - Format population numbers with commas at each thousandths place\n   - Add the ability to sort by Population (ascending, descending, and unsorted)\n\nBONUS:\n   - Format population numbers with commas at each thousandths place (e.g., `1,000,000`)\n*/\nimport { useEffect, useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction useStateData() {\n  _s();\n  return useQuery({\n    queryKey: [\"posts\"],\n    queryFn: async () => {\n      const response = await fetch(\"https://datausa.io/api/data?drilldowns=State&measures=Population&year=latest\");\n      console.log(response);\n      return await response.json();\n    }\n  });\n}\n_s(useStateData, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport default function States() {\n  _s2();\n  const {\n    status,\n    data,\n    error,\n    isFetching\n  } = useStateData();\n  console.log(\"state data\", data);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"State Statistics by Year\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_s2(States, \"VppjfKW1n6rs7K+AtAGnq8tejCg=\", false, function () {\n  return [useStateData];\n});\n_c = States;\nvar _c;\n$RefreshReg$(_c, \"States\");","map":{"version":3,"names":["useEffect","useState","useQuery","jsxDEV","_jsxDEV","useStateData","_s","queryKey","queryFn","response","fetch","console","log","json","States","_s2","status","data","error","isFetching","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/justinhaut/Desktop/rentvine-project/src/containers/States.js"],"sourcesContent":["/* \nState Population Page\n   - Using a select dropdown, allow the user to choose a year of census data\n      - The dropdown should only have years with corresponding census data\n      - These options should be dynamically generated and not hardcoded\n   - Display a table showing each state with its corresponding population\n      - The table should initially show the census data for the most recent year\n   - Format population numbers with commas at each thousandths place\n   - Add the ability to sort by Population (ascending, descending, and unsorted)\n\nBONUS:\n   - Format population numbers with commas at each thousandths place (e.g., `1,000,000`)\n*/\nimport { useEffect, useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\n\nfunction useStateData() {\n  return useQuery({\n    queryKey: [\"posts\"],\n    queryFn: async () => {\n      const response = await fetch(\n        \"https://datausa.io/api/data?drilldowns=State&measures=Population&year=latest\"\n      );\n      console.log(response);\n      return await response.json();\n    },\n  });\n}\n\nexport default function States() {\n  const { status, data, error, isFetching } = useStateData();\n  console.log(\"state data\", data);\n\n  return (\n    <div>\n      <h4>State Statistics by Year</h4>\n    </div>\n  );\n}\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,SAASC,QAAQ,QAAQ,uBAAuB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACtB,OAAOJ,QAAQ,CAAC;IACdK,QAAQ,EAAE,CAAC,OAAO,CAAC;IACnBC,OAAO,EAAE,MAAAA,CAAA,KAAY;MACnB,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,8EACF,CAAC;MACDC,OAAO,CAACC,GAAG,CAACH,QAAQ,CAAC;MACrB,OAAO,MAAMA,QAAQ,CAACI,IAAI,CAAC,CAAC;IAC9B;EACF,CAAC,CAAC;AACJ;AAACP,EAAA,CAXQD,YAAY;EAAA,QACZH,QAAQ;AAAA;AAYjB,eAAe,SAASY,MAAMA,CAAA,EAAG;EAAAC,GAAA;EAC/B,MAAM;IAAEC,MAAM;IAAEC,IAAI;IAAEC,KAAK;IAAEC;EAAW,CAAC,GAAGd,YAAY,CAAC,CAAC;EAC1DM,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEK,IAAI,CAAC;EAE/B,oBACEb,OAAA;IAAAgB,QAAA,eACEhB,OAAA;MAAAgB,QAAA,EAAI;IAAwB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9B,CAAC;AAEV;AAACT,GAAA,CATuBD,MAAM;EAAA,QACgBT,YAAY;AAAA;AAAAoB,EAAA,GADlCX,MAAM;AAAA,IAAAW,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}