{"ast":null,"code":"var _jsxFileName = \"/Users/justinhaut/Desktop/rentvine-project/src/containers/Nation.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n/* \nNational Population Page\n   - Display the population for the entire nation using a list\n   - The list should initially show the 5 most recent years along with their populations\n      - Format population numbers with commas at each thousandths place (e.g., `1,000,000`)\n   - The user should have an option to edit their list and customize it how they see fit using a modal, checkboxes, and submit\n\nBONUS:\n   - Format population numbers with commas at each thousandths place (e.g., `1,000,000`)\n*/\nimport { useEffect, useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Paper from \"@mui/material/Paper\";\nimport Grid from \"@mui/material/Grid\";\nimport Box from \"@mui/material/Box\";\nimport { Button } from \"@mui/material\";\nimport YearModal from \"../components/YearModal\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction useNationData() {\n  _s();\n  return useQuery({\n    queryKey: [\"posts\"],\n    queryFn: async () => {\n      const response = await fetch(\"https://datausa.io/api/data?drilldowns=Nation&measures=Population\");\n      console.log(response);\n      return await response.json();\n    }\n  });\n}\n_s(useNationData, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport default function Nation() {\n  _s2();\n  const [nationData, setNationData] = useState([]);\n  const [open, setOpen] = useState(false);\n  const {\n    status,\n    data,\n    error,\n    isFetching\n  } = useNationData();\n  const handleClose = () => {\n    setOpen(false);\n  };\n  const handleListItemClick = value => {\n    console.log(\"value\");\n  };\n  useEffect(() => {\n    console.log(\"effect loaded!\");\n    if (data) {\n      console.log(\"data\", data.data);\n      const cleanNationData = data.data.map((i, index) => {\n        return {\n          key: index,\n          year: i[\"Year\"],\n          population: new Intl.NumberFormat().format(i[\"Population\"]),\n          selected: index < 5\n        };\n      });\n      setNationData(cleanNationData);\n      console.log(\"clean nation data\", cleanNationData);\n    } else {\n      console.log(\"no data\");\n    }\n  }, [data]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        flexGrow: 1\n      },\n      children: /*#__PURE__*/_jsxDEV(Grid, {\n        container: true,\n        spacing: 2,\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          size: {\n            xs: 6,\n            md: 8\n          },\n          children: /*#__PURE__*/_jsxDEV(\"h4\", {\n            children: \"Nation Statistics by Year\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          size: {\n            xs: 6,\n            md: 4\n          },\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => setOpen(prev => !open),\n            children: \"Edit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n      component: Paper,\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        \"aria-label\": \"simple table\",\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Year\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: \"Population\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: nationData.map((row, index) => row.selected && /*#__PURE__*/_jsxDEV(TableRow, {\n            sx: {\n              \"&:last-child td, &:last-child th\": {\n                border: 0\n              }\n            },\n            children: [/*#__PURE__*/_jsxDEV(TableCell, {\n              component: \"th\",\n              scope: \"row\",\n              children: row.year\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n              children: row.population\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 21\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(YearModal, {\n      open: open,\n      handleClose: handleClose,\n      years: nationData,\n      handleListItemClick: handleListItemClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n}\n_s2(Nation, \"Q0fKL6IR9xGxvO3rUydVY3BFT7c=\", false, function () {\n  return [useNationData];\n});\n_c = Nation;\nvar _c;\n$RefreshReg$(_c, \"Nation\");","map":{"version":3,"names":["useEffect","useState","useQuery","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","Grid","Box","Button","YearModal","jsxDEV","_jsxDEV","useNationData","_s","queryKey","queryFn","response","fetch","console","log","json","Nation","_s2","nationData","setNationData","open","setOpen","status","data","error","isFetching","handleClose","handleListItemClick","value","cleanNationData","map","i","index","key","year","population","Intl","NumberFormat","format","selected","children","sx","flexGrow","container","spacing","size","xs","md","fileName","_jsxFileName","lineNumber","columnNumber","onClick","prev","component","row","border","scope","years","_c","$RefreshReg$"],"sources":["/Users/justinhaut/Desktop/rentvine-project/src/containers/Nation.js"],"sourcesContent":["/* \nNational Population Page\n   - Display the population for the entire nation using a list\n   - The list should initially show the 5 most recent years along with their populations\n      - Format population numbers with commas at each thousandths place (e.g., `1,000,000`)\n   - The user should have an option to edit their list and customize it how they see fit using a modal, checkboxes, and submit\n\nBONUS:\n   - Format population numbers with commas at each thousandths place (e.g., `1,000,000`)\n*/\nimport { useEffect, useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport Table from \"@mui/material/Table\";\nimport TableBody from \"@mui/material/TableBody\";\nimport TableCell from \"@mui/material/TableCell\";\nimport TableContainer from \"@mui/material/TableContainer\";\nimport TableHead from \"@mui/material/TableHead\";\nimport TableRow from \"@mui/material/TableRow\";\nimport Paper from \"@mui/material/Paper\";\nimport Grid from \"@mui/material/Grid\";\nimport Box from \"@mui/material/Box\";\nimport { Button } from \"@mui/material\";\nimport YearModal from \"../components/YearModal\";\n\nfunction useNationData() {\n  return useQuery({\n    queryKey: [\"posts\"],\n    queryFn: async () => {\n      const response = await fetch(\n        \"https://datausa.io/api/data?drilldowns=Nation&measures=Population\"\n      );\n      console.log(response);\n      return await response.json();\n    },\n  });\n}\n\nexport default function Nation() {\n  const [nationData, setNationData] = useState([]);\n  const [open, setOpen] = useState(false);\n\n  const { status, data, error, isFetching } = useNationData();\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleListItemClick = (value) => {\n    console.log(\"value\");\n  };\n\n  useEffect(() => {\n    console.log(\"effect loaded!\");\n    if (data) {\n      console.log(\"data\", data.data);\n      const cleanNationData = data.data.map((i, index) => {\n        return {\n          key: index,\n          year: i[\"Year\"],\n          population: new Intl.NumberFormat().format(i[\"Population\"]),\n          selected: index < 5,\n        };\n      });\n      setNationData(cleanNationData);\n      console.log(\"clean nation data\", cleanNationData);\n    } else {\n      console.log(\"no data\");\n    }\n  }, [data]);\n\n  return (\n    <div>\n      <Box sx={{ flexGrow: 1 }}>\n        <Grid container spacing={2}>\n          <Grid size={{ xs: 6, md: 8 }}>\n            <h4>Nation Statistics by Year</h4>\n          </Grid>\n          <Grid size={{ xs: 6, md: 4 }}>\n            <Button onClick={() => setOpen((prev) => !open)}>Edit</Button>\n          </Grid>\n        </Grid>\n      </Box>\n\n      <TableContainer component={Paper}>\n        <Table aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Year</TableCell>\n              <TableCell>Population</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {nationData.map(\n              (row, index) =>\n                row.selected && (\n                  <TableRow\n                    key={index}\n                    sx={{ \"&:last-child td, &:last-child th\": { border: 0 } }}\n                  >\n                    <TableCell component=\"th\" scope=\"row\">\n                      {row.year}\n                    </TableCell>\n                    <TableCell>{row.population}</TableCell>\n                  </TableRow>\n                )\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <YearModal\n        open={open}\n        handleClose={handleClose}\n        years={nationData}\n        handleListItemClick={handleListItemClick}\n      />\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}